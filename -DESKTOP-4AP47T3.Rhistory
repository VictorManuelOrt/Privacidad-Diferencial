for (l in 1:c) {
S=S+(sqrt(sum((Dataset[i,]-V[j,])^2))
+rlaplace(1,0,(3*sqrt(d)/epsilon))
/sqrt(sum((Dataset[i,]-V[l,])^2))
+rlaplace(1,0,(3*sqrt(d)/epsilon)))^(1/(m-1))
}
U[i,j]=1/S #obs x_i\neq v_j
}
}
#Paso de normalizacion de las filas de U
for (i in 1:dim(Dataset)[1]) {
U[i,]=U[i,]-min(U)+1
U[i,]=U[i,]/sum(U[i,])
}
#Calculo de los nuevos centroides
for (i in 1:c) {
for (j in 1:dim(Dataset)[2]) {
V[i,j]=sum(((U[,i])^m)*Dataset[,j])/sum(((U[,i])^m))+rlaplace(1,0,(3/epsilon))
if (V[i,j]>1){
V[i,j]=1
}  else {
if (V[i,j]<0){
V[i,j]=0
}
}
}
}
}
c=2 #cantidad de clusters
privacy_parameter <- 100 #parametro de privacidad
m=2 #coeficiente de fuzzificacion
t=10 #numero de iteraciones
d=dim(Dataset)[2]
runif(c*dim(Dataset)[2])
#Matriz con los centroides
V=matrix(runif(c*dim(Dataset)[2]), c, dim(Dataset)[2])
N=dim(Dataset)[2]
epsilon=privacy_parameter/(t*c*(2+dim(Dataset)[2]))
U=matrix(rep(0,dim(Dataset)[1]*c), dim(Dataset)[1],c)
for (k in 1:t) {
for (i in 1:dim(Dataset)[1]) {
for (j in 1:c) {
S=0
for (l in 1:c) {
S=S+(sqrt(sum((Dataset[i,]-V[j,])^2))
+rlaplace(1,0,(3*sqrt(d)/epsilon))
/sqrt(sum((Dataset[i,]-V[l,])^2))
+rlaplace(1,0,(3*sqrt(d)/epsilon)))^(1/(m-1))
}
U[i,j]=1/S #obs x_i\neq v_j
}
}
#Paso de normalizacion de las filas de U
for (i in 1:dim(Dataset)[1]) {
U[i,]=U[i,]-min(U)+1
U[i,]=U[i,]/sum(U[i,])
}
#Calculo de los nuevos centroides
for (i in 1:c) {
for (j in 1:dim(Dataset)[2]) {
V[i,j]=sum(((U[,i])^m)*Dataset[,j])/sum(((U[,i])^m))+rlaplace(1,0,(3/epsilon))
if (V[i,j]>1){
V[i,j]=1
}  else {
if (V[i,j]<0){
V[i,j]=0
}
}
}
}
}
for (k in 1:t) {
for (i in 1:dim(Dataset)[1]) {
for (j in 1:c) {
S=0
for (l in 1:c) {
S=S+(sqrt(sum((Dataset[i,]-V[j,])^2))
+rlaplace(1,0,(3*sqrt(d)/epsilon))
/sqrt(sum((Dataset[i,]-V[l,])^2))
+rlaplace(1,0,(3*sqrt(d)/epsilon)))^(1/(m-1))
}
U[i,j]=1/S #obs x_i\neq v_j
}
}
#Paso de normalizacion de las filas de U
for (i in 1:dim(Dataset)[1]) {
U[i,]=U[i,]-min(U)+1
U[i,]=U[i,]/sum(U[i,])
}
#Calculo de los nuevos centroides
for (i in 1:c) {
for (j in 1:dim(Dataset)[2]) {
V[i,j]=sum(((U[,i])^m)*Dataset[,j])/sum(((U[,i])^m))+rlaplace(1,0,(3/epsilon))
if (V[i,j]>1){
V[i,j]=1
}  else {
if (V[i,j]<0){
V[i,j]=0
}
}
}
}
}
plot(PPlot[,1],PPlot[,2],col=PPlot[,3],pch=16)
Color=data.frame(U,rep(0,dim(Dataset)[1]))
plot(Dataset[,1],Dataset[,2],col=rgb(Color),pch=16)
t=5 #numero de iteraciones
View(DATA)
View(Dataset)
#Matriz con los centroides
V=matrix(runif(c*dim(Dataset)[2]), c, dim(Dataset)[2])
N=dim(Dataset)[2]
epsilon=privacy_parameter/(t*c*(2+dim(Dataset)[2]))
U=matrix(rep(0,dim(Dataset)[1]*c), dim(Dataset)[1],c)
for (k in 1:t) {
for (i in 1:dim(Dataset)[1]) {
for (j in 1:c) {
S=0
for (l in 1:c) {
S=S+(sqrt(sum((Dataset[i,]-V[j,])^2))
+rlaplace(1,0,(3*sqrt(d)/epsilon))
/sqrt(sum((Dataset[i,]-V[l,])^2))
+rlaplace(1,0,(3*sqrt(d)/epsilon)))^(1/(m-1))
}
U[i,j]=1/S #obs x_i\neq v_j
}
}
#Paso de normalizacion de las filas de U
for (i in 1:dim(Dataset)[1]) {
U[i,]=U[i,]-min(U)+1
U[i,]=U[i,]/sum(U[i,])
}
#Calculo de los nuevos centroides
for (i in 1:c) {
for (j in 1:dim(Dataset)[2]) {
V[i,j]=sum(((U[,i])^m)*Dataset[,j])/sum(((U[,i])^m))+rlaplace(1,0,(3/epsilon))
if (V[i,j]>1){
V[i,j]=1
}  else {
if (V[i,j]<0){
V[i,j]=0
}
}
}
}
}
plot(PPlot[,1],PPlot[,2],col=PPlot[,3],pch=16)
Color=data.frame(U,rep(0,dim(Dataset)[1]))
plot(Dataset[,1],Dataset[,2],col=rgb(Color),pch=16)
m=4 #coeficiente de fuzzificacion
t=5 #numero de iteraciones
d=dim(Dataset)[2]
runif(c*dim(Dataset)[2])
#Matriz con los centroides
V=matrix(runif(c*dim(Dataset)[2]), c, dim(Dataset)[2])
N=dim(Dataset)[2]
epsilon=privacy_parameter/(t*c*(2+dim(Dataset)[2]))
U=matrix(rep(0,dim(Dataset)[1]*c), dim(Dataset)[1],c)
for (k in 1:t) {
for (i in 1:dim(Dataset)[1]) {
for (j in 1:c) {
S=0
for (l in 1:c) {
S=S+(sqrt(sum((Dataset[i,]-V[j,])^2))
+rlaplace(1,0,(3*sqrt(d)/epsilon))
/sqrt(sum((Dataset[i,]-V[l,])^2))
+rlaplace(1,0,(3*sqrt(d)/epsilon)))^(1/(m-1))
}
U[i,j]=1/S #obs x_i\neq v_j
}
}
#Paso de normalizacion de las filas de U
for (i in 1:dim(Dataset)[1]) {
U[i,]=U[i,]-min(U)+1
U[i,]=U[i,]/sum(U[i,])
}
#Calculo de los nuevos centroides
for (i in 1:c) {
for (j in 1:dim(Dataset)[2]) {
V[i,j]=sum(((U[,i])^m)*Dataset[,j])/sum(((U[,i])^m))+rlaplace(1,0,(3/epsilon))
if (V[i,j]>1){
V[i,j]=1
}  else {
if (V[i,j]<0){
V[i,j]=0
}
}
}
}
}
m=2 #coeficiente de fuzzificacion
t=5 #numero de iteraciones
d=dim(Dataset)[2]
runif(c*dim(Dataset)[2])
#Matriz con los centroides
V=matrix(runif(c*dim(Dataset)[2]), c, dim(Dataset)[2])
N=dim(Dataset)[2]
epsilon=privacy_parameter/(t*c*(2+dim(Dataset)[2]))
U=matrix(rep(0,dim(Dataset)[1]*c), dim(Dataset)[1],c)
for (k in 1:t) {
for (i in 1:dim(Dataset)[1]) {
for (j in 1:c) {
S=0
for (l in 1:c) {
S=S+(sqrt(sum((Dataset[i,]-V[j,])^2))
+rlaplace(1,0,(3*sqrt(d)/epsilon))
/sqrt(sum((Dataset[i,]-V[l,])^2))
+rlaplace(1,0,(3*sqrt(d)/epsilon)))^(1/(m-1))
}
U[i,j]=1/S #obs x_i\neq v_j
}
}
#Paso de normalizacion de las filas de U
for (i in 1:dim(Dataset)[1]) {
U[i,]=U[i,]-min(U)+1
U[i,]=U[i,]/sum(U[i,])
}
#Calculo de los nuevos centroides
for (i in 1:c) {
for (j in 1:dim(Dataset)[2]) {
V[i,j]=sum(((U[,i])^m)*Dataset[,j])/sum(((U[,i])^m))+rlaplace(1,0,(3/epsilon))
if (V[i,j]>1){
V[i,j]=1
}  else {
if (V[i,j]<0){
V[i,j]=0
}
}
}
}
}
plot(PPlot[,1],PPlot[,2],col=PPlot[,3],pch=16)
Color=data.frame(U,rep(0,dim(Dataset)[1]))
plot(Dataset[,1],Dataset[,2],col=rgb(Color),pch=16)
m=1.1 #coeficiente de fuzzificacion
t=5 #numero de iteraciones
d=dim(Dataset)[2]
runif(c*dim(Dataset)[2])
#Matriz con los centroides
V=matrix(runif(c*dim(Dataset)[2]), c, dim(Dataset)[2])
N=dim(Dataset)[2]
epsilon=privacy_parameter/(t*c*(2+dim(Dataset)[2]))
U=matrix(rep(0,dim(Dataset)[1]*c), dim(Dataset)[1],c)
for (k in 1:t) {
for (i in 1:dim(Dataset)[1]) {
for (j in 1:c) {
S=0
for (l in 1:c) {
S=S+(sqrt(sum((Dataset[i,]-V[j,])^2))
+rlaplace(1,0,(3*sqrt(d)/epsilon))
/sqrt(sum((Dataset[i,]-V[l,])^2))
+rlaplace(1,0,(3*sqrt(d)/epsilon)))^(1/(m-1))
}
U[i,j]=1/S #obs x_i\neq v_j
}
}
#Paso de normalizacion de las filas de U
for (i in 1:dim(Dataset)[1]) {
U[i,]=U[i,]-min(U)+1
U[i,]=U[i,]/sum(U[i,])
}
#Calculo de los nuevos centroides
for (i in 1:c) {
for (j in 1:dim(Dataset)[2]) {
V[i,j]=sum(((U[,i])^m)*Dataset[,j])/sum(((U[,i])^m))+rlaplace(1,0,(3/epsilon))
if (V[i,j]>1){
V[i,j]=1
}  else {
if (V[i,j]<0){
V[i,j]=0
}
}
}
}
}
m=6 #coeficiente de fuzzificacion
t=5 #numero de iteraciones
d=dim(Dataset)[2]
runif(c*dim(Dataset)[2])
#Matriz con los centroides
V=matrix(runif(c*dim(Dataset)[2]), c, dim(Dataset)[2])
N=dim(Dataset)[2]
epsilon=privacy_parameter/(t*c*(2+dim(Dataset)[2]))
U=matrix(rep(0,dim(Dataset)[1]*c), dim(Dataset)[1],c)
for (k in 1:t) {
for (i in 1:dim(Dataset)[1]) {
for (j in 1:c) {
S=0
for (l in 1:c) {
S=S+(sqrt(sum((Dataset[i,]-V[j,])^2))
+rlaplace(1,0,(3*sqrt(d)/epsilon))
/sqrt(sum((Dataset[i,]-V[l,])^2))
+rlaplace(1,0,(3*sqrt(d)/epsilon)))^(1/(m-1))
}
U[i,j]=1/S #obs x_i\neq v_j
}
}
#Paso de normalizacion de las filas de U
for (i in 1:dim(Dataset)[1]) {
U[i,]=U[i,]-min(U)+1
U[i,]=U[i,]/sum(U[i,])
}
#Calculo de los nuevos centroides
for (i in 1:c) {
for (j in 1:dim(Dataset)[2]) {
V[i,j]=sum(((U[,i])^m)*Dataset[,j])/sum(((U[,i])^m))+rlaplace(1,0,(3/epsilon))
if (V[i,j]>1){
V[i,j]=1
}  else {
if (V[i,j]<0){
V[i,j]=0
}
}
}
}
}
plot(PPlot[,1],PPlot[,2],col=PPlot[,3],pch=16)
m=2 #coeficiente de fuzzificacion
t=5 #numero de iteraciones
d=dim(Dataset)[2]
runif(c*dim(Dataset)[2])
#Matriz con los centroides
V=matrix(runif(c*dim(Dataset)[2]), c, dim(Dataset)[2])
N=dim(Dataset)[2]
epsilon=privacy_parameter/(t*c*(2+dim(Dataset)[2]))
U=matrix(rep(0,dim(Dataset)[1]*c), dim(Dataset)[1],c)
for (k in 1:t) {
for (i in 1:dim(Dataset)[1]) {
for (j in 1:c) {
S=0
for (l in 1:c) {
S=S+(sqrt(sum((Dataset[i,]-V[j,])^2))
+rlaplace(1,0,(3*sqrt(d)/epsilon))
/sqrt(sum((Dataset[i,]-V[l,])^2))
+rlaplace(1,0,(3*sqrt(d)/epsilon)))^(1/(m-1))
}
U[i,j]=1/S #obs x_i\neq v_j
}
}
#Paso de normalizacion de las filas de U
for (i in 1:dim(Dataset)[1]) {
U[i,]=U[i,]-min(U)+1
U[i,]=U[i,]/sum(U[i,])
}
#Calculo de los nuevos centroides
for (i in 1:c) {
for (j in 1:dim(Dataset)[2]) {
V[i,j]=sum(((U[,i])^m)*Dataset[,j])/sum(((U[,i])^m))+rlaplace(1,0,(3/epsilon))
if (V[i,j]>1){
V[i,j]=1
}  else {
if (V[i,j]<0){
V[i,j]=0
}
}
}
}
}
Color=data.frame(U,rep(0,dim(Dataset)[1]))
plot(Dataset[,1],Dataset[,2],col=rgb(Color),pch=16)
c=2 #cantidad de clusters
privacy_parameter <- 10 #parametro de privacidad
m=2 #coeficiente de fuzzificacion
t=5 #numero de iteraciones
d=dim(Dataset)[2]
runif(c*dim(Dataset)[2])
#Matriz con los centroides
V=matrix(runif(c*dim(Dataset)[2]), c, dim(Dataset)[2])
N=dim(Dataset)[2]
epsilon=privacy_parameter/(t*c*(2+dim(Dataset)[2]))
U=matrix(rep(0,dim(Dataset)[1]*c), dim(Dataset)[1],c)
for (k in 1:t) {
for (i in 1:dim(Dataset)[1]) {
for (j in 1:c) {
S=0
for (l in 1:c) {
S=S+(sqrt(sum((Dataset[i,]-V[j,])^2))
+rlaplace(1,0,(3*sqrt(d)/epsilon))
/sqrt(sum((Dataset[i,]-V[l,])^2))
+rlaplace(1,0,(3*sqrt(d)/epsilon)))^(1/(m-1))
}
U[i,j]=1/S #obs x_i\neq v_j
}
}
#Paso de normalizacion de las filas de U
for (i in 1:dim(Dataset)[1]) {
U[i,]=U[i,]-min(U)+1
U[i,]=U[i,]/sum(U[i,])
}
#Calculo de los nuevos centroides
for (i in 1:c) {
for (j in 1:dim(Dataset)[2]) {
V[i,j]=sum(((U[,i])^m)*Dataset[,j])/sum(((U[,i])^m))+rlaplace(1,0,(3/epsilon))
if (V[i,j]>1){
V[i,j]=1
}  else {
if (V[i,j]<0){
V[i,j]=0
}
}
}
}
}
plot(PPlot[,1],PPlot[,2],col=PPlot[,3],pch=16)
Color=data.frame(U,rep(0,dim(Dataset)[1]))
plot(Dataset[,1],Dataset[,2],col=rgb(Color),pch=16)
plot(PPlot[,1],PPlot[,2],col=PPlot[,3],pch=16)
Color=data.frame(U,rep(0,dim(Dataset)[1]))
plot(Dataset[,1],Dataset[,2],col=rgb(Color),pch=16)
library(VGAM)
library(ggplot2)
library(stats)
Dataset <- read.csv("C:/Users/5/OneDrive - Benemérita Universidad Autónoma de Puebla/Documents/TESIS Ms Cs Mt/Differential Privacy Codigos y bases de datos/conjunto_de_datos_defunciones_registradas_2021_csv/conjunto_de_datos/conjunto_de_datos_defunciones_registradas_2021.csv", header=FALSE)
Causa=Dataset[,14]
Causa=Causa[-1]
Causa=as.numeric(Causa)
Causa=Causa[-which(Causa==4998)]
Causa=Causa[-which(Causa<4000)]
privacy_parameter <- 0.1
# Función para el Mecanismo Exponencial para la moda
exponential_mechanism_mode <- function(data, epsilon) {
sensitivity <- as.numeric(max(Causa))-as.numeric(min(Causa))  # Sensibilidad de la consulta de moda
unique_values <- unique(data)
# Calcula la puntuación para cada valor único
scores <- sapply(unique_values, function(value) {
count <- -abs(sum(data-value))
return(count)
})
# Calcula la distribución de probabilidad usando el Mecanismo Exponencial
scaled_scores <- (epsilon * scores) / (2 * sensitivity)
probabilities <- exp(scaled_scores) / sum(exp(scaled_scores))
# Elije aleatoriamente la moda basada en las probabilidades
return(data.frame(unique_values, probabilities))
#Devuelve en un dataframe el vector con los valores unicos y el vector de probs
}
Res=exponential_mechanism_mode(Causa, privacy_parameter)
noisy_mode <- sample(Res[,1], size = 1, prob = Res[,2])
o=mean(as.numeric(Causa))
cat("Promedio real:", as.character(o), "\n")
cat("Promedio con ruido:", as.character(noisy_mode), "\n")
length(which(Causa==mode(Causa)))
length(which(Causa==noisy_mode))
N=rep(0,1000)
for (i in 1:1000) {
N[i] <- sample(Res[,1], size = 1, prob = Res[,2])
}
Nunique_values <- unique(N)
Nscores <- sapply(Nunique_values, function(value) {
count <- sum(N == value)
return(count)
})
NApar <- sapply(Nunique_values, function(value) {
count <- sum(Causa == value)
return(count)
})
INFo=data.frame(Nunique_values, Nscores, NApar)
INFo[order(INFo[,2], decreasing =TRUE),]
Suma=sum(Causa)+rlaplace(1, 0, 2*(max(Causa)-min(Causa))/privacy_parameter)
Cantidad=length(Causa)+rlaplace(1, 0, 2/privacy_parameter)
Promediocompues=Suma/Cantidad
Promediocompues
NC=rep(0,1000)
for (i in 1:1000) {
Suma=sum(Causa)+rlaplace(1, 0, 2*(max(Causa)-min(Causa))/privacy_parameter)
Cantidad=length(Causa)+rlaplace(1, 0, 2/privacy_parameter)
NC[i] <-Suma/Cantidad
}
hist(NC)
NCunique=unique(NC)
NCscores <- sapply(NCunique, function(value) {
count <- sum(NC == value)
return(count)
})
INFoo=data.frame(NCunique)
INFoo[order(NC, decreasing =TRUE),]
max(NC)-min(NC)
# Función de utilidad Mecanismo Exponencial para la moda
Score <- function(obs) {
C=0
for (i in 1:length(Causa)) {
C=C+Causa[i]-obs
}
utilidad=-abs(C)
#utilidad <- -abs(sum(Causa-obs))
return(utilidad)
}
#sensibilidad
sensitivity <- as.numeric(max(Causa))-as.numeric(min(Causa))
#funcion de utilidad escalada
scaled_scores <- function(obs){
scal=(privacy_parameter * Score(obs)) / (2 * sensitivity)
return(scal)
}
#funcion de utilidad eponencial
exp_scores <- function(obs){
ex=exp(scaled_scores(obs))
return(ex)
}
Intcoc= function(y){
II=integrate(exp_scores,min(Causa), y)
return(as.numeric(II[1]))
}
I=integrate(exp_scores,min(Causa),max(Causa))
integrate(exp_scores,4060,4070)
xseq<-seq(min(Causa),max(Causa),len=1000)
lines(xseq,sapply(xseq,Intcoc))
#Funcion de densidad
Densidad<- function(obs){
dens=exp_scores(obs)/as.numeric(I[1])
return(dens)
}
plot(seq(4020,4080,length=200), Densidad(seq(4020,4080,length=200)), type="l")
