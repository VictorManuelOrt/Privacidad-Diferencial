diabetes=read.csv("diabetes.csv")
DATA=data.frame(rep(1,dim(diabetes)[1]), diabetes[,c(2,3,7)])
LineR=lm(formula = DATA$DiabetesPedigreeFunction ~ DATA$Glucose+DATA$BloodPressure, data=DATA[,2:4])
LineR
diabetes=read.csv("diabetes.csv")
DATA=data.frame(rep(1,dim(diabetes)[1]), diabetes[,c(2,3,7)])
#PreparaciÃ³n de los datos:
DATA[,1]=DATA[,1]/sqrt(dim(DATA[,-1])[2])
DATA[,2]=(DATA[,2]-min(DATA[,2]))/((max(DATA[,2])-min(DATA[,2]))*sqrt(dim(DATA[,-1])[2]))
DATA[,3]=(DATA[,3]-min(DATA[,3]))/((max(DATA[,3])-min(DATA[,3]))*sqrt(dim(DATA[,-1])[2]))
DATA[,4]=(DATA[,4]-min(DATA[,4]))/(max(DATA[,4])-min(DATA[,4]))
LineR=lm(formula = DATA$DiabetesPedigreeFunction ~ DATA$Glucose+DATA$BloodPressure, data=DATA[,2:4])
LineR
diabetes=read.csv("diabetes.csv")
DATA=data.frame(rep(1,dim(diabetes)[1]), diabetes[,c(2,3,7)])
#PreparaciÃ³n de los datos:
DATA[,1]=DATA[,1]/sqrt(dim(DATA[,-1])[2])
DATA[,2]=(DATA[,2]-min(DATA[,2]))/((max(DATA[,2])-min(DATA[,2]))*sqrt(dim(DATA[,-1])[2]))
DATA[,3]=(DATA[,3]-min(DATA[,3]))/((max(DATA[,3])-min(DATA[,3]))*sqrt(dim(DATA[,-1])[2]))
DATA[,4]=(DATA[,4]-min(DATA[,4]))/(max(DATA[,4])-min(DATA[,4]))
LineR=lm(formula = DATA$DiabetesPedigreeFunction ~ DATA$Glucose+DATA$BloodPressure, data=DATA[,2:4])
#Coeficientes:
Phi1=rep(0,dim(DATA[-1])[2])
#Phi2=rep(0,dim(DATA)[2]^2)
Phi2=matrix(rep(0,dim(DATA[-1])[2]^2),dim(DATA[-1])[2],dim(DATA[-1])[2])
for (j in 1:dim(DATA[,-1])[2]) {
Phi1[j]=-2*sum(DATA[,j]*DATA[,dim(DATA)[2]])
}
for (j in 1:dim(DATA[-1])[2]) {
for (l in 1:dim(DATA[-1])[2]) {
Phi2[j,l]=sum(DATA[,j]*DATA[,l])
}
}
#Polinomio: recibe como entrada un set de datos tamano n x (d+1)
# y un vector tamano d
f_obj=function(DATA,w){
lambdaw1=rep(0,dim(DATA[-1])[2])
#lambdaw1=matrix(rep(0,dim(DATA[-1])[2]^2),dim(DATA[-1])[2],dim(DATA[-1])[2])
for (j in 1:dim(DATA[,-1])[2]) {
lambdaw1[j]=(-2*sum(DATA[,j]*DATA[,dim(DATA)[2]]))*w[j]
}
lambdaw2=matrix(rep(0,dim(DATA[-1])[2]^2),dim(DATA[-1])[2],dim(DATA[-1])[2])
for (j in 1:dim(DATA[-1])[2]) {
for (l in 1:dim(DATA[-1])[2]) {
lambdaw2[j,l]=(sum(DATA[,j]*DATA[,l]))*w[j]*w[l]
}
}
return(sum(lambdaw1)+sum(lambdaw2))
}
f_objD=function(w){
f_obj(DATA,w)
}
argmini=optim(rep(1,dim(DATA[,-1])[2]),f_objD)
argmini
Delta=2*(dim(DATA[-1])[2]+1)^2
#Parte de DP
#Polinomio con ruidio
Lf_obj=function(DATA,w){
lambdaw1=matrix(rep(0,dim(DATA[-1])[2]^2),dim(DATA[-1])[2],dim(DATA[-1])[2])
for (j in 1:dim(DATA[,-1])[2]) {
lambdaw1[j]=((-2*sum(DATA[,j]*DATA[,dim(DATA)[2]]))+rlaplace(1,0,Delta/privacy_parameter))*w[j]
}
lambdaw2=matrix(rep(0,dim(DATA[-1])[2]^2),dim(DATA[-1])[2],dim(DATA[-1])[2])
for (j in 1:dim(DATA[-1])[2]) {
for (l in 1:dim(DATA[-1])[2]) {
lambdaw2[j,l]=((sum(DATA[,j]*DATA[,l]))+rlaplace(1,0,Delta/privacy_parameter))*w[j]*w[l]
}
}
return(sum(lambdaw1)+sum(lambdaw2))
}
#funcion obj con ruido
Lf_objD=function(w){
Lf_obj(DATA,w)
}
#minimo de la funciopn con ruido
Largmini=optim(rep(0,dim(DATA[,-1])[2]),Lf_objD)
ARGM=data.frame(LineR$coefficients,argmini$par,Largmini$par)
ARGM
diabetes=read.csv("diabetes.csv")
DATA=data.frame(rep(1,dim(diabetes)[1]), diabetes[,c(2,3,7)])
#PreparaciÃ³n de los datos:
DATA[,1]=DATA[,1]/sqrt(dim(DATA[,-1])[2])
DATA[,2]=(DATA[,2]-min(DATA[,2]))/((max(DATA[,2])-min(DATA[,2]))*sqrt(dim(DATA[,-1])[2]))
DATA[,3]=(DATA[,3]-min(DATA[,3]))/((max(DATA[,3])-min(DATA[,3]))*sqrt(dim(DATA[,-1])[2]))
DATA[,4]=(DATA[,4]-min(DATA[,4]))/(max(DATA[,4])-min(DATA[,4]))
LineR=lm(formula = DATA$DiabetesPedigreeFunction ~ DATA$Glucose+DATA$BloodPressure, data=DATA[,2:4])
#Coeficientes:
Phi1=rep(0,dim(DATA[-1])[2])
#Phi2=rep(0,dim(DATA)[2]^2)
Phi2=matrix(rep(0,dim(DATA[-1])[2]^2),dim(DATA[-1])[2],dim(DATA[-1])[2])
for (j in 1:dim(DATA[,-1])[2]) {
Phi1[j]=-2*sum(DATA[,j]*DATA[,dim(DATA)[2]])
}
for (j in 1:dim(DATA[-1])[2]) {
for (l in 1:dim(DATA[-1])[2]) {
Phi2[j,l]=sum(DATA[,j]*DATA[,l])
}
}
#Polinomio: recibe como entrada un set de datos tamano n x (d+1)
# y un vector tamano d
f_obj=function(DATA,w){
lambdaw1=rep(0,dim(DATA[-1])[2])
#lambdaw1=matrix(rep(0,dim(DATA[-1])[2]^2),dim(DATA[-1])[2],dim(DATA[-1])[2])
for (j in 1:dim(DATA[,-1])[2]) {
lambdaw1[j]=(-2*sum(DATA[,j]*DATA[,dim(DATA)[2]]))*w[j]
}
lambdaw2=matrix(rep(0,dim(DATA[-1])[2]^2),dim(DATA[-1])[2],dim(DATA[-1])[2])
for (j in 1:dim(DATA[-1])[2]) {
for (l in 1:dim(DATA[-1])[2]) {
lambdaw2[j,l]=(sum(DATA[,j]*DATA[,l]))*w[j]*w[l]
}
}
return(sum(lambdaw1)+sum(lambdaw2))
}
f_objD=function(w){
f_obj(DATA,w)
}
argmini=optim(rep(1,dim(DATA[,-1])[2]),f_objD)
argmini
Delta=2*(dim(DATA[-1])[2]+1)^2
#Parte de DP
#Polinomio con ruidio
Lf_obj=function(DATA,w){
lambdaw1=matrix(rep(0,dim(DATA[-1])[2]^2),dim(DATA[-1])[2],dim(DATA[-1])[2])
for (j in 1:dim(DATA[,-1])[2]) {
lambdaw1[j]=((-2*sum(DATA[,j]*DATA[,dim(DATA)[2]]))+rlaplace(1,0,Delta/privacy_parameter))*w[j]
}
lambdaw2=matrix(rep(0,dim(DATA[-1])[2]^2),dim(DATA[-1])[2],dim(DATA[-1])[2])
for (j in 1:dim(DATA[-1])[2]) {
for (l in 1:dim(DATA[-1])[2]) {
lambdaw2[j,l]=((sum(DATA[,j]*DATA[,l]))+rlaplace(1,0,Delta/privacy_parameter))*w[j]*w[l]
}
}
return(sum(lambdaw1)+sum(lambdaw2))
}
#funcion obj con ruido
Lf_objD=function(w){
Lf_obj(DATA,w)
}
#minimo de la funciopn con ruido
Largmini=optim(rep(0,dim(DATA[,-1])[2]),Lf_objD)
ARGM=data.frame(LineR$coefficients,argmini$par,Largmini$par)
ARGM
argmini=optim(rep(0,dim(DATA[,-1])[2]),f_objD)
argmini
diabetes=read.csv("diabetes.csv")
DATA=data.frame(rep(1,dim(diabetes)[1]), diabetes[,c(2,3,7)])
#PreparaciÃ³n de los datos:
DATA[,1]=DATA[,1]/sqrt(dim(DATA[,-1])[2])
DATA[,2]=(DATA[,2]-min(DATA[,2]))/((max(DATA[,2])-min(DATA[,2]))*sqrt(dim(DATA[,-1])[2]))
DATA[,3]=(DATA[,3]-min(DATA[,3]))/((max(DATA[,3])-min(DATA[,3]))*sqrt(dim(DATA[,-1])[2]))
DATA[,4]=(DATA[,4]-min(DATA[,4]))/(max(DATA[,4])-min(DATA[,4]))
LineR=lm(formula = DATA$DiabetesPedigreeFunction ~ DATA$Glucose+DATA$BloodPressure, data=DATA[,2:4])
#Coeficientes:
Phi1=rep(0,dim(DATA[-1])[2])
#Phi2=rep(0,dim(DATA)[2]^2)
Phi2=matrix(rep(0,dim(DATA[-1])[2]^2),dim(DATA[-1])[2],dim(DATA[-1])[2])
for (j in 1:dim(DATA[,-1])[2]) {
Phi1[j]=-2*sum(DATA[,j]*DATA[,dim(DATA)[2]])
}
for (j in 1:dim(DATA[-1])[2]) {
for (l in 1:dim(DATA[-1])[2]) {
Phi2[j,l]=sum(DATA[,j]*DATA[,l])
}
}
#Polinomio: recibe como entrada un set de datos tamano n x (d+1)
# y un vector tamano d
f_obj=function(DATA,w){
lambdaw1=rep(0,dim(DATA[-1])[2])
#lambdaw1=matrix(rep(0,dim(DATA[-1])[2]^2),dim(DATA[-1])[2],dim(DATA[-1])[2])
for (j in 1:dim(DATA[,-1])[2]) {
lambdaw1[j]=(-2*sum(DATA[,j]*DATA[,dim(DATA)[2]]))*w[j]
}
lambdaw2=matrix(rep(0,dim(DATA[-1])[2]^2),dim(DATA[-1])[2],dim(DATA[-1])[2])
for (j in 1:dim(DATA[-1])[2]) {
for (l in 1:dim(DATA[-1])[2]) {
lambdaw2[j,l]=(sum(DATA[,j]*DATA[,l]))*w[j]*w[l]
}
}
return(sum(lambdaw1)+sum(lambdaw2))
}
f_objD=function(w){
f_obj(DATA,w)
}
argmini=optim(rep(0,dim(DATA[,-1])[2]),f_objD)
argmini
Delta=2*(dim(DATA[-1])[2]+1)^2
#Parte de DP
#Polinomio con ruidio
Lf_obj=function(DATA,w){
lambdaw1=matrix(rep(0,dim(DATA[-1])[2]^2),dim(DATA[-1])[2],dim(DATA[-1])[2])
for (j in 1:dim(DATA[,-1])[2]) {
lambdaw1[j]=((-2*sum(DATA[,j]*DATA[,dim(DATA)[2]]))+rlaplace(1,0,Delta/privacy_parameter))*w[j]
}
lambdaw2=matrix(rep(0,dim(DATA[-1])[2]^2),dim(DATA[-1])[2],dim(DATA[-1])[2])
for (j in 1:dim(DATA[-1])[2]) {
for (l in 1:dim(DATA[-1])[2]) {
lambdaw2[j,l]=((sum(DATA[,j]*DATA[,l]))+rlaplace(1,0,Delta/privacy_parameter))*w[j]*w[l]
}
}
return(sum(lambdaw1)+sum(lambdaw2))
}
#funcion obj con ruido
Lf_objD=function(w){
Lf_obj(DATA,w)
}
#minimo de la funciopn con ruido
Largmini=optim(rep(0,dim(DATA[,-1])[2]),Lf_objD)
ARGM=data.frame(LineR$coefficients,argmini$par,Largmini$par)
ARGM
diabetes=read.csv("diabetes.csv")
DATA=data.frame(rep(1,dim(diabetes)[1]), diabetes[,c(2,3,7)])
#PreparaciÃ³n de los datos:
DATA[,1]=DATA[,1]/sqrt(dim(DATA[,-1])[2])
DATA[,2]=(DATA[,2]-min(DATA[,2]))/((max(DATA[,2])-min(DATA[,2]))*sqrt(dim(DATA[,-1])[2]))
DATA[,3]=(DATA[,3]-min(DATA[,3]))/((max(DATA[,3])-min(DATA[,3]))*sqrt(dim(DATA[,-1])[2]))
DATA[,4]=(DATA[,4]-min(DATA[,4]))/(max(DATA[,4])-min(DATA[,4]))
LineR=lm(formula = DATA$DiabetesPedigreeFunction ~ DATA$Glucose+DATA$BloodPressure, data=DATA[,2:4])
#Coeficientes:
Phi1=rep(0,dim(DATA[-1])[2])
#Phi2=rep(0,dim(DATA)[2]^2)
Phi2=matrix(rep(0,dim(DATA[-1])[2]^2),dim(DATA[-1])[2],dim(DATA[-1])[2])
for (j in 1:dim(DATA[,-1])[2]) {
Phi1[j]=-2*sum(DATA[,j]*DATA[,dim(DATA)[2]])
}
for (j in 1:dim(DATA[-1])[2]) {
for (l in 1:dim(DATA[-1])[2]) {
Phi2[j,l]=sum(DATA[,j]*DATA[,l])
}
}
#Polinomio: recibe como entrada un set de datos tamano n x (d+1)
# y un vector tamano d
f_obj=function(DATA,w){
lambdaw1=rep(0,dim(DATA[-1])[2])
#lambdaw1=matrix(rep(0,dim(DATA[-1])[2]^2),dim(DATA[-1])[2],dim(DATA[-1])[2])
for (j in 1:dim(DATA[,-1])[2]) {
lambdaw1[j]=(-2*sum(DATA[,j]*DATA[,dim(DATA)[2]]))*w[j]
}
lambdaw2=matrix(rep(0,dim(DATA[-1])[2]^2),dim(DATA[-1])[2],dim(DATA[-1])[2])
for (j in 1:dim(DATA[-1])[2]) {
for (l in 1:dim(DATA[-1])[2]) {
lambdaw2[j,l]=(sum(DATA[,j]*DATA[,l]))*w[j]*w[l]
}
}
return(sum(lambdaw1)+sum(lambdaw2))
}
f_objD=function(w){
f_obj(DATA,w)
}
argmini=optim(rep(0,dim(DATA[,-1])[2]),f_objD)
argmini
Delta=2*(dim(DATA[-1])[2]+1)^2
#Parte de DP
#Polinomio con ruidio
Lf_obj=function(DATA,w){
lambdaw1=matrix(rep(0,dim(DATA[-1])[2]^2),dim(DATA[-1])[2],dim(DATA[-1])[2])
for (j in 1:dim(DATA[,-1])[2]) {
lambdaw1[j]=((-2*sum(DATA[,j]*DATA[,dim(DATA)[2]]))+rlaplace(1,0,Delta/privacy_parameter))*w[j]
}
lambdaw2=matrix(rep(0,dim(DATA[-1])[2]^2),dim(DATA[-1])[2],dim(DATA[-1])[2])
for (j in 1:dim(DATA[-1])[2]) {
for (l in 1:dim(DATA[-1])[2]) {
lambdaw2[j,l]=((sum(DATA[,j]*DATA[,l]))+rlaplace(1,0,Delta/privacy_parameter))*w[j]*w[l]
}
}
return(sum(lambdaw1)+sum(lambdaw2))
}
#funcion obj con ruido
Lf_objD=function(w){
Lf_obj(DATA,w)
}
#minimo de la funciopn con ruido
Largmini=optim(rep(0,dim(DATA[,-1])[2]),Lf_objD)
ARGM=data.frame(LineR$coefficients,argmini$par,Largmini$par)
ARGM
diabetes=read.csv("diabetes.csv")
DATA=data.frame(rep(1,dim(diabetes)[1]), diabetes[,c(2,3,7)])
#PreparaciÃ³n de los datos:
DATA[,1]=DATA[,1]/sqrt(dim(DATA[,-1])[2])
DATA[,2]=(DATA[,2]-min(DATA[,2]))/((max(DATA[,2])-min(DATA[,2]))*sqrt(dim(DATA[,-1])[2]))
DATA[,3]=(DATA[,3]-min(DATA[,3]))/((max(DATA[,3])-min(DATA[,3]))*sqrt(dim(DATA[,-1])[2]))
DATA[,4]=(DATA[,4]-min(DATA[,4]))/(max(DATA[,4])-min(DATA[,4]))
LineR=lm(formula = DATA$DiabetesPedigreeFunction ~ DATA$Glucose+DATA$BloodPressure, data=DATA[,2:4])
#Coeficientes:
Phi1=rep(0,dim(DATA[-1])[2])
#Phi2=rep(0,dim(DATA)[2]^2)
Phi2=matrix(rep(0,dim(DATA[-1])[2]^2),dim(DATA[-1])[2],dim(DATA[-1])[2])
for (j in 1:dim(DATA[,-1])[2]) {
Phi1[j]=-2*sum(DATA[,j]*DATA[,dim(DATA)[2]])
}
for (j in 1:dim(DATA[-1])[2]) {
for (l in 1:dim(DATA[-1])[2]) {
Phi2[j,l]=sum(DATA[,j]*DATA[,l])
}
}
#Polinomio: recibe como entrada un set de datos tamano n x (d+1)
# y un vector tamano d
f_obj=function(DATA,w){
lambdaw1=rep(0,dim(DATA[-1])[2])
#lambdaw1=matrix(rep(0,dim(DATA[-1])[2]^2),dim(DATA[-1])[2],dim(DATA[-1])[2])
for (j in 1:dim(DATA[,-1])[2]) {
lambdaw1[j]=(-2*sum(DATA[,j]*DATA[,dim(DATA)[2]]))*w[j]
}
lambdaw2=matrix(rep(0,dim(DATA[-1])[2]^2),dim(DATA[-1])[2],dim(DATA[-1])[2])
for (j in 1:dim(DATA[-1])[2]) {
for (l in 1:dim(DATA[-1])[2]) {
lambdaw2[j,l]=(sum(DATA[,j]*DATA[,l]))*w[j]*w[l]
}
}
return(sum(lambdaw1)+sum(lambdaw2))
}
f_objD=function(w){
f_obj(DATA,w)
}
argmini=optim(rep(0,dim(DATA[,-1])[2]),f_objD)
argmini
Delta=2*(dim(DATA[-1])[2]+1)^2
#Parte de DP
#Polinomio con ruidio
Lf_obj=function(DATA,w){
lambdaw1=matrix(rep(0,dim(DATA[-1])[2]^2),dim(DATA[-1])[2],dim(DATA[-1])[2])
for (j in 1:dim(DATA[,-1])[2]) {
lambdaw1[j]=((-2*sum(DATA[,j]*DATA[,dim(DATA)[2]]))+rlaplace(1,0,Delta/privacy_parameter))*w[j]
}
lambdaw2=matrix(rep(0,dim(DATA[-1])[2]^2),dim(DATA[-1])[2],dim(DATA[-1])[2])
for (j in 1:dim(DATA[-1])[2]) {
for (l in 1:dim(DATA[-1])[2]) {
lambdaw2[j,l]=((sum(DATA[,j]*DATA[,l]))+rlaplace(1,0,Delta/privacy_parameter))*w[j]*w[l]
}
}
return(sum(lambdaw1)+sum(lambdaw2))
}
#funcion obj con ruido
Lf_objD=function(w){
Lf_obj(DATA,w)
}
#minimo de la funciopn con ruido
Largmini=optim(rep(0,dim(DATA[,-1])[2]),Lf_objD)
ARGM=data.frame(LineR$coefficients,argmini$par,Largmini$par)
ARGM
View(DATA)
WW=matrix(rep(0,n*dim(DATA[-1])[2]),100,dim(DATA[-1])[2])
n=100
WW=matrix(rep(0,n*dim(DATA[-1])[2]),100,dim(DATA[-1])[2])
View(WW)
WW[1,]
WW[,1]
n=100
WW=matrix(rep(0,n*dim(DATA[-1])[2]),100,dim(DATA[-1])[2])
for (i in 1:n) {
WW[i,]=optim(rep(0,dim(DATA[,-1])[2]),Lf_objD)$par
}
View(WW)
summary(WW)
ARGM
diabetes=read.csv("diabetes.csv")
DATA=data.frame(rep(1,dim(diabetes)[1]), diabetes[,c(2,3,7)])
DATA[,1]=DATA[,1]/sqrt(dim(DATA[,-1])[2])
DATA[,2]=(DATA[,2]-min(DATA[,2]))/((max(DATA[,2])-min(DATA[,2]))*sqrt(dim(DATA[,-1])[2]))
DATA[,3]=(DATA[,3]-min(DATA[,3]))/((max(DATA[,3])-min(DATA[,3]))*sqrt(dim(DATA[,-1])[2]))
DATA[,4]=(DATA[,4]-min(DATA[,4]))/(max(DATA[,4])-min(DATA[,4]))
LineR=lm(formula = DATA$DiabetesPedigreeFunction ~ DATA$Glucose+DATA$BloodPressure, data=DATA[,2:4])
LineR=lm(formula = DATA$DiabetesPedigreeFunction ~ DATA$Glucose+DATA$BloodPressure, data=DATA[,2:4])
LineR
Phi1=rep(0,dim(DATA[-1])[2])
#Phi2=rep(0,dim(DATA)[2]^2)
Phi2=matrix(rep(0,dim(DATA[-1])[2]^2),dim(DATA[-1])[2],dim(DATA[-1])[2])
for (j in 1:dim(DATA[,-1])[2]) {
Phi1[j]=-2*sum(DATA[,j]*DATA[,dim(DATA)[2]])
}
for (j in 1:dim(DATA[-1])[2]) {
for (l in 1:dim(DATA[-1])[2]) {
Phi2[j,l]=sum(DATA[,j]*DATA[,l])
}
}
#Polinomio: recibe como entrada un set de datos tamano n x (d+1)
# y un vector tamano d
f_obj=function(DATA,w){
lambdaw1=rep(0,dim(DATA[-1])[2])
#lambdaw1=matrix(rep(0,dim(DATA[-1])[2]^2),dim(DATA[-1])[2],dim(DATA[-1])[2])
for (j in 1:dim(DATA[,-1])[2]) {
lambdaw1[j]=(-2*sum(DATA[,j]*DATA[,dim(DATA)[2]]))*w[j]
}
lambdaw2=matrix(rep(0,dim(DATA[-1])[2]^2),dim(DATA[-1])[2],dim(DATA[-1])[2])
for (j in 1:dim(DATA[-1])[2]) {
for (l in 1:dim(DATA[-1])[2]) {
lambdaw2[j,l]=(sum(DATA[,j]*DATA[,l]))*w[j]*w[l]
}
}
return(sum(lambdaw1)+sum(lambdaw2))
}
f_objD=function(w){
f_obj(DATA,w)
}
argmini=optim(rep(0,dim(DATA[,-1])[2]),f_objD)
argmini
LineR$coefficients
argmini$par
Delta=2*(dim(DATA[-1])[2]+1)^2
Delta=2*(dim(DATA[-1])[2]+1)^2
#Polinomio con ruidio
Lf_obj=function(DATA,w){
lambdaw1=matrix(rep(0,dim(DATA[-1])[2]^2),dim(DATA[-1])[2],dim(DATA[-1])[2])
for (j in 1:dim(DATA[,-1])[2]) {
lambdaw1[j]=((-2*sum(DATA[,j]*DATA[,dim(DATA)[2]]))+rlaplace(1,0,Delta/privacy_parameter))*w[j]
}
lambdaw2=matrix(rep(0,dim(DATA[-1])[2]^2),dim(DATA[-1])[2],dim(DATA[-1])[2])
for (j in 1:dim(DATA[-1])[2]) {
for (l in 1:dim(DATA[-1])[2]) {
lambdaw2[j,l]=((sum(DATA[,j]*DATA[,l]))+rlaplace(1,0,Delta/privacy_parameter))*w[j]*w[l]
}
}
return(sum(lambdaw1)+sum(lambdaw2))
}
#funcion obj con ruido
Lf_objD=function(w){
Lf_obj(DATA,w)
}
#minimo de la funciopn con ruido
Largmini=optim(rep(0,dim(DATA[,-1])[2]),Lf_objD)
ARGM=data.frame(LineR$coefficients,argmini$par,Largmini$par)
ARGM
summary(WW)
diabetes=read.csv("diabetes.csv")
DATA=data.frame(rep(1,dim(diabetes)[1]), diabetes[,c(2,3,7)])
View(ARGM)
View(DATA)
DATA[,1]=DATA[,1]/sqrt(dim(DATA[,-1])[2])
DATA[,2]=(DATA[,2]-min(DATA[,2]))/((max(DATA[,2])-min(DATA[,2]))*sqrt(dim(DATA[,-1])[2]))
DATA[,3]=(DATA[,3]-min(DATA[,3]))/((max(DATA[,3])-min(DATA[,3]))*sqrt(dim(DATA[,-1])[2]))
DATA[,4]=(DATA[,4]-min(DATA[,4]))/(max(DATA[,4])-min(DATA[,4]))
LineR=lm(formula = DATA$DiabetesPedigreeFunction ~ DATA$Glucose+DATA$BloodPressure, data=DATA[,2:4])
Phi1=rep(0,dim(DATA[-1])[2])
#Phi2=rep(0,dim(DATA)[2]^2)
Phi2=matrix(rep(0,dim(DATA[-1])[2]^2),dim(DATA[-1])[2],dim(DATA[-1])[2])
for (j in 1:dim(DATA[,-1])[2]) {
Phi1[j]=-2*sum(DATA[,j]*DATA[,dim(DATA)[2]])
}
for (j in 1:dim(DATA[-1])[2]) {
for (l in 1:dim(DATA[-1])[2]) {
Phi2[j,l]=sum(DATA[,j]*DATA[,l])
}
}
#Polinomio: recibe como entrada un set de datos tamano n x (d+1)
# y un vector tamano d
f_obj=function(DATA,w){
lambdaw1=rep(0,dim(DATA[-1])[2])
#lambdaw1=matrix(rep(0,dim(DATA[-1])[2]^2),dim(DATA[-1])[2],dim(DATA[-1])[2])
for (j in 1:dim(DATA[,-1])[2]) {
lambdaw1[j]=(-2*sum(DATA[,j]*DATA[,dim(DATA)[2]]))*w[j]
}
lambdaw2=matrix(rep(0,dim(DATA[-1])[2]^2),dim(DATA[-1])[2],dim(DATA[-1])[2])
for (j in 1:dim(DATA[-1])[2]) {
for (l in 1:dim(DATA[-1])[2]) {
lambdaw2[j,l]=(sum(DATA[,j]*DATA[,l]))*w[j]*w[l]
}
}
return(sum(lambdaw1)+sum(lambdaw2))
}
f_objD=function(w){
f_obj(DATA,w)
}
argmini=optim(rep(0,dim(DATA[,-1])[2]),f_objD)
argmini
LineR
f_objD(c(0.08591,0.20462,0.03211))
f_objD(c(0.14879683 ,0.20462,0.03211))
argmini=optim(rep(0.5,dim(DATA[,-1])[2]),f_objD)
argmini
LineR
argmini=optim(rep(0.8,dim(DATA[,-1])[2]),f_objD)
argmini
argmini=optim(rep(0.8,dim(DATA[,-1])[2]),f_objD)
argmini
argmini=optim(rep(0.08,dim(DATA[,-1])[2]),f_objD)
argmini
library(stats)
library(VGAM)
library(ggplot2)
library(PerformanceAnalytics)
library(readxl)
privacy_parameter <- 1
dim(DATA)[2]
argmini
f_objD(c(0.14879921, 0.20461884, 0.03213734))
LineR
f_objD(c( 0.08591           ,  0.20462            , 0.03211 ))
DATA=data.frame(rep(1,dim(diabetes)[1]), diabetes[,c(2,3,7)])
DATA1[,2]=(DATA[,2]-min(DATA[,2]))/((max(DATA[,2])-min(DATA[,2]))*sqrt(dim(DATA[,-1])[2]-1))
DATA1=DATA
DATA1[,2]=(DATA[,2]-min(DATA[,2]))/((max(DATA[,2])-min(DATA[,2]))*sqrt(dim(DATA[,-1])[2]-1))
DATA1[,3]=(DATA[,3]-min(DATA[,3]))/((max(DATA[,3])-min(DATA[,3]))*sqrt(dim(DATA[,-1])[2]-1))
DATA1[,4]=(DATA[,4]-min(DATA[,4]))/(max(DATA[,4])-min(DATA[,4]))
DATA[,1]=DATA[,1]/sqrt(dim(DATA[,-1])[2])
DATA[,2]=(DATA[,2]-min(DATA[,2]))/((max(DATA[,2])-min(DATA[,2]))*sqrt(dim(DATA[,-1])[2]))
DATA[,3]=(DATA[,3]-min(DATA[,3]))/((max(DATA[,3])-min(DATA[,3]))*sqrt(dim(DATA[,-1])[2]))
DATA[,4]=(DATA[,4]-min(DATA[,4]))/(max(DATA[,4])-min(DATA[,4]))
LineR=lm(formula = DATA1$DiabetesPedigreeFunction ~ DATA1$Glucose+DATA1$BloodPressure, data=DATA1[,2:4])
LineR
argmini
View(DATA1)
LineR=lm(formula = DATA1$DiabetesPedigreeFunction ~ DATA1$Glucose+DATA1$BloodPressure, data=DATA1[,2:4])
LineR
argmini
LineR=lm(formula = DATA$DiabetesPedigreeFunction ~ DATA$Glucose+DATA$BloodPressure, data=DATA[,2:4])
LineR
argmini
diabetes=read.csv("diabetes.csv")
DATA=data.frame(rep(1,dim(diabetes)[1]), diabetes[,c(2,3,7)])
sqrt(dim(DATA[,-1])[2]-1)
sqtr(3)
sqrt(3)
